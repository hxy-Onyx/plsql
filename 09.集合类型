1.索引表
2.嵌套表
3.可变数组

1.索引表一般以键值对的方式存在
特征
a.需要索引:可以是整数或字符串
b.不需要提前定义表大小，可以动态扩展
c.访问时按索引访问
d.适合快速查找和更新的场合
e.不能存储在数据库中
举例：
基本的语法：
TYPE 名字 IS TABLE OF 元素类型 INDEX BY 索引类型;
declare
//一般PLS_INTEGER和varchar2()表示类型
type employee_salary_table is table of number index by PLS_INTEGER;
//定义表之后一定要声明一个表对象
employee_salary employee_salary_table;
begin
-- 初始化数据，注意是通过变量名而不是类型名
   employee_salary(1):=1000;
   employee_salary(2):=2000;
   employee_salary(3):=3000;
     
   DBMS_OUTPUT.PUT_LINE('Salary of no.1: ' || employee_salary(1));
   DBMS_OUTPUT.PUT_LINE('Salary of no.2: ' || employee_salary(2));
   DBMS_OUTPUT.PUT_LINE('Salary of no.3: ' || employee_salary(3));
exception 
  when others then
    dbms_output.put_line('出现错误'||sqlerrm);
end;

如果想使用循环的方式将表输出：不能直接使用循环，

declare
type employee_salary_table is table of number index by PLS_INTEGER;
employee_salary employee_salary_table;
v_key number;
begin
   employee_salary(1):=1000;
   employee_salary(2):=2000;
   employee_salary(3):=3000;
     
   v_key:=employee_salary.FIRST; 
   while v_key is not null loop
     DBMS_OUTPUT.PUT_LINE('Salary of ' || v_key || ': ' || employee_salary(v_key));
        v_key := employee_salary.NEXT(v_key);
    end loop;
exception 
  when others then
    dbms_output.put_line('出现错误'||sqlerrm);
end;

2.嵌套表
a.嵌套表是无序的，元素可以重复。
b.集合的大小是动态的
c.可以使用集合的方法（如EXTEND、DELETE等）来管理元素。

2.1常用的方法：
EXTEND：扩展嵌套表，增加元素。
DELETE：删除某个元素或所有元素。
TRIM：从嵌套表末尾删除元素。
COUNT：返回嵌套表中当前元素的个数。

2.2基本语法：
TYPE 表名 IS TABLE OF 元素类型;

举例：
DECLARE
    -- 定义嵌套表类型，存储一组NUMBER类型的数据
    TYPE num_table IS TABLE OF NUMBER;

    -- 声明嵌套表变量
    my_numbers num_table := num_table(); -- 初始化为空的嵌套表
BEGIN
    -- 使用 EXTEND 方法扩展嵌套表
    my_numbers.EXTEND(3);  -- 扩展嵌套表，增加3个元素
    my_numbers(1) := 100;  -- 第一个元素
    my_numbers(2) := 200;  -- 第二个元素
    my_numbers(3) := 300;  -- 第三个元素

    -- 打印嵌套表的元素
    FOR i IN 1..my_numbers.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('元素 ' || i || ': ' || my_numbers(i));
    END LOOP;

    -- 删除第二个元素
    my_numbers.DELETE(2);
    DBMS_OUTPUT.PUT_LINE('第二个元素被删除。');

    -- 再次遍历嵌套表，打印元素
    FOR i IN 1..my_numbers.COUNT LOOP
        IF my_numbers.EXISTS(i) THEN
            DBMS_OUTPUT.PUT_LINE('元素 ' || i || ': ' || my_numbers(i));
        ELSE
               DBMS_OUTPUT.PUT_LINE('元素 ' || i || ': 被删除');
        END IF;
    END LOOP;
END;

3.可变数组
特点：
有序集合，元素按照插入的顺序存储。
数组的大小是固定的，声明时指定最大容量，超过容量后不能再插入新元素。
必须初始化：VARRAY必须先初始化，才能对其进行赋值。
不能使用EXTEND：VARRAY不支持EXTEND方法扩展元素数量，但是在动态扩展和赋值时使用

3.1基本语法
TYPE type_name IS VARRAY(max_size) OF element_type;

3.2常用方法
COUNT：返回集合中当前元素的个数。
EXTEND：向集合的末尾增加元素（嵌套表和VARRAY）。
DELETE：从集合中删除元素（嵌套表和索引表）。
EXISTS(n)：判断集合的第n个元素是否存在。
FIRST 和 LAST：返回集合的第一个和最后一个索引

3.3可变函数在赋值时常出现的问题
3.3.1 初始化时赋值：声明 VARRAY 变量时直接赋值   
DECLARE
    TYPE num_varray IS VARRAY(5) OF NUMBER;  -- 定义最多存储 5 个 NUMBER 类型元素的 VARRAY
    my_varray num_varray := num_varray(100, 200, 300);  -- 初始化时赋值
BEGIN
    -- 输出 VARRAY 中的第一个元素
    DBMS_OUTPUT.PUT_LINE('第一个元素：' || my_varray(1));
END;
3.3.2 初始化时不赋值：声明 VARRAY 变量时不赋值，之后在代码中动态赋值
DECLARE
    TYPE num_varray IS VARRAY(5) OF NUMBER;  -- 定义 VARRAY 类型
    my_varray num_varray;  -- 声明 VARRAY 变量，但不初始化
BEGIN
    -- 初始化 VARRAY 变量
    my_varray := num_varray();  -- 空的初始化

    -- 动态赋值
    my_varray.EXTEND(3);  -- 扩展数组，增加 3 个元素
    my_varray(1) := 100;
    my_varray(2) := 200;
    my_varray(3) := 300;

    -- 输出元素
    DBMS_OUTPUT.PUT_LINE('第一个元素：' || my_varray(1));
END;


3.3.3 动态赋值和扩展

VARRAY 的大小是固定的（在声明时定义的最大值），你可以使用 EXTEND 方法来动态增加元素，但只能在未达到 VARRAY 定义的最大容量时进行扩展
DECLARE
    TYPE num_varray IS VARRAY(5) OF NUMBER;  -- 定义 VARRAY 类型，最多 5 个元素
    my_varray num_varray := num_varray();  -- 初始化为空的 VARRAY
BEGIN
    -- 动态扩展和赋值
    my_varray.EXTEND(2);  -- 扩展数组，增加 2 个元素
    my_varray(1) := 500;
    my_varray(2) := 1000;

    -- 输出元素
    DBMS_OUTPUT.PUT_LINE('第一个元素：' || my_varray(1));
    DBMS_OUTPUT.PUT_LINE('第二个元素：' || my_varray(2));

    -- 尝试扩展超过最大容量时会报错
    -- my_varray.EXTEND(4);  -- 错误：会超过 VARRAY 的定义容量
END;

